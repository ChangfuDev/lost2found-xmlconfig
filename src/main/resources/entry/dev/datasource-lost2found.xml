<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <description>spring数据源配置-lost2found数据库</description>

    <!-- 加载属性文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:entry/dev/spring.properties</value>
            </list>
        </property>
    </bean>

    <!-- 默认dataSource，druid连接池 -->
    <bean id="defaultDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 连接信息 -->
        <property name="driverClassName" value="${jdbc.driverClass}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 其他设置 -->
        <property name="initialSize" value="${jdbc.minPoolSize}"/>
        <property name="maxActive" value="${jdbc.maxPoolSize}"/>
        <property name="minIdle" value="${jdbc.minIdleSize}"/>
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <property name="filters" value="${jdbc.filters}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}"/>
    </bean>

    <!-- SqlSessionFactoryBean（Thread not safe, it not be used directly!） -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 选择dataSource -->
        <property name="dataSource" ref="defaultDataSource"/>
        <!-- 别名设置 -->
        <property name="typeAliasesPackage" value="cn.sevenleave.xmlconfig.**.model"/>
        <!-- 配置*Mapper.xml的路径 -->
        <property name="mapperLocations">
            <list>
                <value>
                    classpath*:**/mapper/mapping/*Mapper.xml
                </value>
            </list>
        </property>
        <property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
                <property name="callSettersOnNulls" value="true"/>
            </bean>
        </property>
        <!-- pageHelper插件 -->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            reasonable=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- 1.SqlSessionFactoryTemplate（Thread safe, service层也可以直接注入使用） -->
    <!-- 2.SqlSessionTemplate -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactoryBean"/>
    </bean>

    <!-- 1.通用mapper包扫描 -->
    <!-- 2.注意！！这里使用的是tk.mybatis.*，如果不需要用通用mapper的话，应该改成org.mybatis.* -->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.sevenleave.xmlconfig.**.mapper"/>
        <!-- 3.下面2个只能选1个，因为只能使用1个 -->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"/>-->
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
    </bean>

    <!-- 1.开启spring的事务处理（可以使用声明式事务管理） -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="defaultDataSource"/>
    </bean>
    <!-- 2.事务模板（service层可以直接注入，显式使用声明式事务） -->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>
    <!-- 3.支持transaction相关的注解,如:@Transactional -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

</beans>